{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { parseString } from 'react-native-xml2js';\nimport { genoveXml } from \"./localData\";\nexport var fetchGenoveProducts = function () {\n  var _ref = _asyncToGenerator(function* () {\n    try {\n      return new Promise(function (resolve, reject) {\n        var options = {\n          explicitArray: true,\n          normalizeTags: false,\n          trim: true,\n          strict: false\n        };\n        parseString(genoveXml, options, function (err, result) {\n          if (err) {\n            console.error('Erro ao converter XML:', err);\n            resolve([]);\n            return;\n          }\n          try {\n            if (!result || !result.rss || !result.rss.channel || !result.rss.channel[0]) {\n              resolve([]);\n              return;\n            }\n            var items = result.rss.channel[0].item || [];\n            var products = [];\n            for (var item of items) {\n              try {\n                if (item.title && item.codigo && item.preco) {\n                  products.push({\n                    id: item.codigo[0],\n                    title: item.title[0],\n                    price: item.preco[0],\n                    image: item.link_imagem ? item.link_imagem[0] : 'https://via.placeholder.com/150',\n                    availability: item.disponibilidade ? item.disponibilidade[0] : '',\n                    brand: item.marca ? item.marca[0] : '',\n                    link: item.link ? item.link[0] : '#',\n                    store: 'Genove'\n                  });\n                }\n              } catch (e) {}\n            }\n            resolve(products);\n          } catch (e) {\n            console.error('Erro ao processar XML:', e);\n            resolve([]);\n          }\n        });\n      });\n    } catch (error) {\n      console.error('Erro geral:', error);\n      return [];\n    }\n  });\n  return function fetchGenoveProducts() {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["parseString","genoveXml","fetchGenoveProducts","_ref","_asyncToGenerator","Promise","resolve","reject","options","explicitArray","normalizeTags","trim","strict","err","result","console","error","rss","channel","items","item","products","title","codigo","preco","push","id","price","image","link_imagem","availability","disponibilidade","brand","marca","link","store","e","apply","arguments"],"sources":["C:/Users/neehi/Documents/GitHub/ecom-tech/EncontraPY/genoveApi.js"],"sourcesContent":["import { parseString } from 'react-native-xml2js';\nimport { genoveXml } from './localData';\n\nexport const fetchGenoveProducts = async () => {\n  try {\n    return new Promise((resolve, reject) => {\n      const options = {\n        explicitArray: true,\n        normalizeTags: false,\n        trim: true,\n        strict: false\n      };\n\n      parseString(genoveXml, options, (err, result) => {\n        if (err) {\n          console.error('Erro ao converter XML:', err);\n          resolve([]);\n          return;\n        }\n        \n        try {\n          if (!result || !result.rss || !result.rss.channel || !result.rss.channel[0]) {\n            resolve([]);\n            return;\n          }\n          \n          const items = result.rss.channel[0].item || [];\n          const products = [];\n          \n          for (const item of items) {\n            try {\n              if (item.title && item.codigo && item.preco) {\n                products.push({\n                  id: item.codigo[0],\n                  title: item.title[0],\n                  price: item.preco[0],\n                  image: item.link_imagem ? item.link_imagem[0] : 'https://via.placeholder.com/150',\n                  availability: item.disponibilidade ? item.disponibilidade[0] : '',\n                  brand: item.marca ? item.marca[0] : '',\n                  link: item.link ? item.link[0] : '#',\n                  store: 'Genove'\n                });\n              }\n            } catch (e) {\n              // Ignora itens com erro\n            }\n          }\n          \n          resolve(products);\n        } catch (e) {\n          console.error('Erro ao processar XML:', e);\n          resolve([]);\n        }\n      });\n    });\n  } catch (error) {\n    console.error('Erro geral:', error);\n    return [];\n  }\n};"],"mappings":";AAAA,SAASA,WAAW,QAAQ,qBAAqB;AACjD,SAASC,SAAS;AAElB,OAAO,IAAMC,mBAAmB;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,aAAY;IAC7C,IAAI;MACF,OAAO,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAK;QACtC,IAAMC,OAAO,GAAG;UACdC,aAAa,EAAE,IAAI;UACnBC,aAAa,EAAE,KAAK;UACpBC,IAAI,EAAE,IAAI;UACVC,MAAM,EAAE;QACV,CAAC;QAEDZ,WAAW,CAACC,SAAS,EAAEO,OAAO,EAAE,UAACK,GAAG,EAAEC,MAAM,EAAK;UAC/C,IAAID,GAAG,EAAE;YACPE,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEH,GAAG,CAAC;YAC5CP,OAAO,CAAC,EAAE,CAAC;YACX;UACF;UAEA,IAAI;YACF,IAAI,CAACQ,MAAM,IAAI,CAACA,MAAM,CAACG,GAAG,IAAI,CAACH,MAAM,CAACG,GAAG,CAACC,OAAO,IAAI,CAACJ,MAAM,CAACG,GAAG,CAACC,OAAO,CAAC,CAAC,CAAC,EAAE;cAC3EZ,OAAO,CAAC,EAAE,CAAC;cACX;YACF;YAEA,IAAMa,KAAK,GAAGL,MAAM,CAACG,GAAG,CAACC,OAAO,CAAC,CAAC,CAAC,CAACE,IAAI,IAAI,EAAE;YAC9C,IAAMC,QAAQ,GAAG,EAAE;YAEnB,KAAK,IAAMD,IAAI,IAAID,KAAK,EAAE;cACxB,IAAI;gBACF,IAAIC,IAAI,CAACE,KAAK,IAAIF,IAAI,CAACG,MAAM,IAAIH,IAAI,CAACI,KAAK,EAAE;kBAC3CH,QAAQ,CAACI,IAAI,CAAC;oBACZC,EAAE,EAAEN,IAAI,CAACG,MAAM,CAAC,CAAC,CAAC;oBAClBD,KAAK,EAAEF,IAAI,CAACE,KAAK,CAAC,CAAC,CAAC;oBACpBK,KAAK,EAAEP,IAAI,CAACI,KAAK,CAAC,CAAC,CAAC;oBACpBI,KAAK,EAAER,IAAI,CAACS,WAAW,GAAGT,IAAI,CAACS,WAAW,CAAC,CAAC,CAAC,GAAG,iCAAiC;oBACjFC,YAAY,EAAEV,IAAI,CAACW,eAAe,GAAGX,IAAI,CAACW,eAAe,CAAC,CAAC,CAAC,GAAG,EAAE;oBACjEC,KAAK,EAAEZ,IAAI,CAACa,KAAK,GAAGb,IAAI,CAACa,KAAK,CAAC,CAAC,CAAC,GAAG,EAAE;oBACtCC,IAAI,EAAEd,IAAI,CAACc,IAAI,GAAGd,IAAI,CAACc,IAAI,CAAC,CAAC,CAAC,GAAG,GAAG;oBACpCC,KAAK,EAAE;kBACT,CAAC,CAAC;gBACJ;cACF,CAAC,CAAC,OAAOC,CAAC,EAAE,CAEZ;YACF;YAEA9B,OAAO,CAACe,QAAQ,CAAC;UACnB,CAAC,CAAC,OAAOe,CAAC,EAAE;YACVrB,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEoB,CAAC,CAAC;YAC1C9B,OAAO,CAAC,EAAE,CAAC;UACb;QACF,CAAC,CAAC;MACJ,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOU,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC;MACnC,OAAO,EAAE;IACX;EACF,CAAC;EAAA,gBAxDYd,mBAAmBA,CAAA;IAAA,OAAAC,IAAA,CAAAkC,KAAA,OAAAC,SAAA;EAAA;AAAA,GAwD/B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}