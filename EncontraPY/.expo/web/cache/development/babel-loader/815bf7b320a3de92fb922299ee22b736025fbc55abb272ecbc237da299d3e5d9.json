{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport { parseString } from 'react-native-xml2js';\nimport { genoveXml } from \"./localData\";\nexport var fetchGenoveProducts = function () {\n  var _ref = _asyncToGenerator(function* () {\n    try {\n      return new Promise(function (resolve, reject) {\n        var options = {\n          explicitArray: true,\n          normalizeTags: false,\n          normalize: true,\n          trim: true,\n          explicitRoot: true,\n          emptyTag: null,\n          strict: false\n        };\n        parseString(genoveXml, options, function (err, result) {\n          if (err) {\n            console.error('Erro ao converter XML:', err);\n            resolve([]);\n            return;\n          }\n          try {\n            if (!result || !result.rss || !result.rss.channel || !result.rss.channel[0] || !result.rss.channel[0].item) {\n              console.warn('Estrutura XML inválida ou incompleta');\n              resolve([]);\n              return;\n            }\n            var items = result.rss.channel[0].item || [];\n            var products = items.map(function (item) {\n              try {\n                return {\n                  id: item.codigo && item.codigo.length > 0 ? item.codigo[0] : String(Math.random()),\n                  title: item.title && item.title.length > 0 ? item.title[0] : 'Produto sem título',\n                  price: item.preco && item.preco.length > 0 ? item.preco[0] : 'Preço não disponível',\n                  image: item.link_imagem && item.link_imagem.length > 0 ? item.link_imagem[0] : 'https://via.placeholder.com/150',\n                  availability: item.disponibilidade && item.disponibilidade.length > 0 ? item.disponibilidade[0] : 'indisponível',\n                  brand: item.marca && item.marca.length > 0 ? item.marca[0] : 'Marca não especificada',\n                  link: item.link && item.link.length > 0 ? item.link[0] : '#',\n                  store: 'Genove'\n                };\n              } catch (itemError) {\n                console.warn('Erro ao processar item:', itemError);\n                return {\n                  id: String(Math.random()),\n                  title: 'Produto com erro',\n                  price: 'N/A',\n                  image: 'https://via.placeholder.com/150',\n                  availability: 'indisponível',\n                  brand: 'N/A',\n                  link: '#',\n                  store: 'Genove'\n                };\n              }\n            });\n            resolve(products);\n          } catch (processingError) {\n            console.error('Erro ao processar dados XML:', processingError);\n            resolve([]);\n          }\n        });\n      });\n    } catch (error) {\n      console.error('Erro geral:', error);\n      return [];\n    }\n  });\n  return function fetchGenoveProducts() {\n    return _ref.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["parseString","genoveXml","fetchGenoveProducts","_ref","_asyncToGenerator","Promise","resolve","reject","options","explicitArray","normalizeTags","normalize","trim","explicitRoot","emptyTag","strict","err","result","console","error","rss","channel","item","warn","items","products","map","id","codigo","length","String","Math","random","title","price","preco","image","link_imagem","availability","disponibilidade","brand","marca","link","store","itemError","processingError","apply","arguments"],"sources":["C:/Users/neehi/Documents/GitHub/ecom-tech/EncontraPY/genoveApi.js"],"sourcesContent":["import { parseString } from 'react-native-xml2js';\nimport { genoveXml } from './localData';\n\nexport const fetchGenoveProducts = async () => {\n  try {\n    return new Promise((resolve, reject) => {\n      // Opções para tornar o parser mais tolerante a erros\n      const options = {\n        explicitArray: true,\n        normalizeTags: false,\n        normalize: true,\n        trim: true,\n        explicitRoot: true,\n        emptyTag: null,\n        strict: false\n      };\n\n      parseString(genoveXml, options, (err, result) => {\n        if (err) {\n          console.error('Erro ao converter XML:', err);\n          // Em vez de rejeitar, retornamos uma lista vazia\n          resolve([]);\n          return;\n        }\n        \n        try {\n          // Verificações de segurança para evitar erros de acesso a propriedades inexistentes\n          if (!result || !result.rss || !result.rss.channel || !result.rss.channel[0] || !result.rss.channel[0].item) {\n            console.warn('Estrutura XML inválida ou incompleta');\n            resolve([]);\n            return;\n          }\n          \n          const items = result.rss.channel[0].item || [];\n          \n          const products = items.map(item => {\n            try {\n              return {\n                id: item.codigo && item.codigo.length > 0 ? item.codigo[0] : String(Math.random()),\n                title: item.title && item.title.length > 0 ? item.title[0] : 'Produto sem título',\n                price: item.preco && item.preco.length > 0 ? item.preco[0] : 'Preço não disponível',\n                image: item.link_imagem && item.link_imagem.length > 0 ? item.link_imagem[0] : 'https://via.placeholder.com/150',\n                availability: item.disponibilidade && item.disponibilidade.length > 0 ? item.disponibilidade[0] : 'indisponível',\n                brand: item.marca && item.marca.length > 0 ? item.marca[0] : 'Marca não especificada',\n                link: item.link && item.link.length > 0 ? item.link[0] : '#',\n                store: 'Genove'\n              };\n            } catch (itemError) {\n              console.warn('Erro ao processar item:', itemError);\n              // Retorna um produto com valores padrão em caso de erro\n              return {\n                id: String(Math.random()),\n                title: 'Produto com erro',\n                price: 'N/A',\n                image: 'https://via.placeholder.com/150',\n                availability: 'indisponível',\n                brand: 'N/A',\n                link: '#',\n                store: 'Genove'\n              };\n            }\n          });\n          \n          resolve(products);\n        } catch (processingError) {\n          console.error('Erro ao processar dados XML:', processingError);\n          resolve([]);\n        }\n      });\n    });\n  } catch (error) {\n    console.error('Erro geral:', error);\n    // Retorna uma lista vazia em vez de lançar erro\n    return [];\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}